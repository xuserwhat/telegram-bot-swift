// Telegram Bot SDK for Swift (unofficial).
// This file is autogenerated by API/generate_wrappers.rb script.

import Foundation
import SwiftyJSON

/// This object represents a sticker.
///
/// - SeeAlso: <https://core.telegram.org/bots/api#sticker>

public struct Sticker: JsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: JSON

    /// Unique identifier for this file
    public var file_id: String {
        get { return json["file_id"].stringValue }
        set { json["file_id"].stringValue = newValue }
    }

    /// Sticker width
    public var width: Int {
        get { return json["width"].intValue }
        set { json["width"].intValue = newValue }
    }

    /// Sticker height
    public var height: Int {
        get { return json["height"].intValue }
        set { json["height"].intValue = newValue }
    }

    /// Optional. Sticker thumbnail in the .webp or .jpg format
    public var thumb: PhotoSize? {
        get {
            let value = json["thumb"]
            return value.isNullOrUnknown ? nil : PhotoSize(json: value)
        }
        set {
            json["thumb"] = newValue?.json ?? JSON.null
        }
    }

    /// Optional. Emoji associated with the sticker
    public var emoji: String? {
        get { return json["emoji"].string }
        set { json["emoji"].string = newValue }
    }

    /// Optional. Name of the sticker set to which the sticker belongs
    public var set_name: String? {
        get { return json["set_name"].string }
        set { json["set_name"].string = newValue }
    }

    /// Optional. For mask stickers, the position where the mask should be placed
    public var mask_position: MaskPosition? {
        get {
            let value = json["mask_position"]
            return value.isNullOrUnknown ? nil : MaskPosition(json: value)
        }
        set {
            json["mask_position"] = newValue?.json ?? JSON.null
        }
    }

    /// Optional. File size
    public var file_size: Int? {
        get { return json["file_size"].int }
        set { json["file_size"].int = newValue }
    }

    public init(json: JSON = [:]) {
        self.json = json
    }
}
